{"version":3,"sources":["static/svg/sibdev-logo.svg","routing/route-builder.jsx","routing/route-builder-private.jsx","components/videos/videos-grid.jsx","components/videos/videos-list.jsx","constants/types.js","redux/actions/videoViewAction.js","components/videos/index.jsx","redux/actions/lS-manageQueries.js","components/modal/index.jsx","redux/actions/youtubeAction.js","components/page-app/index.jsx","components/page-favorites/index.jsx","redux/actions/lS-authUser.js","redux/actions/authAction.js","constants/db.js","components/authentication/authentication-form.jsx","components/authentication/index.jsx","components/navbar/index.jsx","routing/route-fabric.jsx","routing/route.jsx","redux/reducers/userReducer.js","redux/reducers/videoReducer.js","redux/reducers/queryReducer.js","redux/reducers/root.js","redux/store/configStore.js","serviceWorker.js","index.jsx"],"names":["module","exports","RouteBuilder","route","isAuthenticated","useSelector","state","user","path","render","to","component","PrivateRoute","Component","rest","pathname","PrivateRouteBuilder","VideosListGrid","videos","video","className","map","key","id","videoId","src","title","snippet","frameBorder","allow","allowFullScreen","channelTitle","VideosList","auth","query","changeVideoView","payload","type","types","VideosContainer","totalResults","videoView","isEmpty","dispatch","useDispatch","handleVideoViewClick","target","attribute","closest","getAttribute","onClick","e","keyvalue","width","height","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","getUserIndex","user_collection","login","userIndex","index","loadQuery","queryArray","JSON","parse","localStorage","getItem","queries","Option","Select","ModalQuery","visible","mode","toggleModal","togglePopconfirm","selectedQuery","Form","useForm","form","useState","allowChange","setAllowChange","setFieldsValue","sort","maxNumb","maxNumbInput","setSlider","value","onOk","submit","okText","onCancel","cancelText","layout","name","onFinish","values","getState","newQuery","Object","assign","setItem","stringify","console","log","changeQuery","uuidv4","push","saveQuery","onFinishFailed","errorInfo","size","direction","align","Item","label","disabled","rules","required","placeholder","allowClear","min","max","onChange","KEY","Search","Input","App","history","useHistory","pageSearchContainerType","setVisibility","useCallback","popConfirm","setPopConfirm","iconHeart","placement","onConfirm","HeartOutlined","span","enterButton","suffix","defaultValue","onSearch","q","axios","get","params","part","maxResults","then","res","data","items","pageInfo","catch","err","Title","Typography","Text","Favorites","setQuery","bordered","dataSource","renderItem","item","strong","order","callSavedQuery","danger","queryIndex","splice","generateToken","Math","random","toString","substr","db","password","checkUser","token","userExists","authUser","loadUser","authorizedUser","checkToken","tailLayout","wrapperCol","offset","AuthenticationFrom","loginFailed","React","useEffect","message","error","content","hideRequiredMark","Password","htmlType","Authentication","dispath","logo","alt","Navbar","useLocation","selectedKeys","routes","privateRoutes","RouteFabric","AppRouter","initialState","rootReducer","combineReducers","filter","middleware","thunk","store","createStore","compose","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6c3177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sibdev-logo.4e9243ef.svg\";","import React from 'react';\r\n\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function RouteBuilder(route) {\r\n  const { isAuthenticated } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <Route\r\n      path={route.path}\r\n      render={() =>\r\n        route.path === '/login' && isAuthenticated === true ? (\r\n          <Redirect to='/' />\r\n        ) : (\r\n          <route.component />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PrivateRoute = ({ Component, ...rest }) => {\r\n  const { isAuthenticated } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        isAuthenticated === true ? (\r\n          <Component />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default function PrivateRouteBuilder(route) {\r\n  return <PrivateRoute path={route.path} Component={route.component} />;\r\n}\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './videos-grid.scss';\r\n\r\nfunction VideosListGrid() {\r\n  const { videos } = useSelector((state) => state.video);\r\n\r\n  return (\r\n    <div className='video-grid__wrapper'>\r\n      {videos.map((video) => {\r\n        return (\r\n          <div className='video-grid__card' key={video.id.videoId}>\r\n            <div className='video-grid__card__video-wrapper'>\r\n              <iframe\r\n                src={'https://www.youtube.com/embed/' + video.id.videoId}\r\n                title={video.snippet.title}\r\n                frameBorder='0'\r\n                allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\r\n                allowFullScreen\r\n              ></iframe>\r\n            </div>\r\n            <div className='video-grid__card__title-wrapper'>\r\n              <h3 className='video-grid__card__title'>{video.snippet.title}</h3>\r\n              <p className='video-grid__card__subtitle'>{video.snippet.channelTitle}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideosListGrid;\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './videos-list.scss';\r\n\r\nfunction VideosList() {\r\n  const { videos } = useSelector((state) => state.video);\r\n\r\n  return (\r\n    <div className='video-list__wrapper'>\r\n      {videos.map((video) => {\r\n        return (\r\n          <div className='video-list__card' key={video.id.videoId}>\r\n            <div className='video-list__card__video-wrapper'>\r\n              <iframe\r\n                src={'https://www.youtube.com/embed/' + video.id.videoId}\r\n                title={video.snippet.title}\r\n                frameBorder='0'\r\n                allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\r\n                allowFullScreen\r\n              ></iframe>\r\n            </div>\r\n            <div className='video-list__card__title-wrapper'>\r\n              <h3 className='video-list__card__title'>{video.snippet.title}</h3>\r\n              <p className='video-list__card__subtitle'>{video.snippet.channelTitle}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideosList;\r\n","export const auth = {\r\n    LOGIN_SUCCESS: 'login/success',\r\n    LOGIN_FAIL: 'login/fail',\r\n    LOGOUT_SUCCESS: 'logout/success'\r\n};\r\n\r\nexport const video = {\r\n    SEARCH: 'video/search',\r\n    SET_EMPTINESS: 'video/empty',\r\n    CHANGE_VIEW: 'video/change_view',\r\n    RESET: 'video/reset'\r\n};\r\n\r\nexport const query = {\r\n    SET: 'query/set',\r\n    ADD: 'query/add',\r\n    EDIT: 'query/edit',\r\n    DELETE: 'query/delete'\r\n};","import * as types from '../../constants/types';\r\n\r\n// Change video-view, between grid / list\r\nconst changeVideoView = (payload) => ({\r\n    type: types.video.CHANGE_VIEW,\r\n    payload\r\n});\r\n\r\nexport {\r\n    changeVideoView as\r\n    default\r\n}","import React from 'react';\r\n\r\nimport VideosListGrid from './videos-grid';\r\nimport VideosList from './videos-list';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport changeVideoView from '../../redux/actions/videoViewAction';\r\n\r\nfunction VideosContainer() {\r\n  const { query, totalResults, videoView, isEmpty } = useSelector((state) => state.video);\r\n  const dispatch = useDispatch();\r\n\r\n  // Change view of VideoList\r\n  const handleVideoViewClick = (target) => {\r\n    let attribute = target.closest('svg').getAttribute('keyvalue');\r\n    if (attribute !== null) {\r\n      if (attribute === 'grid') {\r\n        dispatch(changeVideoView('grid'));\r\n      } else if (attribute === 'list') {\r\n        dispatch(changeVideoView('list'));\r\n      }\r\n    } else return;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEmpty ? null : (\r\n        <div className='page-search__pannel'>\r\n          <div className='page-search__pannel__title'>\r\n            Видео по запросу&ensp; <span>«{query}»</span>\r\n            <div className='page-search__pannel__title__total-results'>{totalResults}</div>\r\n          </div>\r\n          <div className='page-search__pannel__btns'>\r\n            <svg\r\n              onClick={(e) => handleVideoViewClick(e.target)}\r\n              className={videoView === 'grid' ? '--active' : ''}\r\n              keyvalue='grid'\r\n              width='24'\r\n              height='24'\r\n              viewBox='0 0 24 24'\r\n              fill='none'\r\n            >\r\n              <path\r\n                d='M10 5H5V10H10V5Z'\r\n                stroke='#272727'\r\n                strokeWidth='2'\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n              />\r\n              <path\r\n                d='M19 5H14V10H19V5Z'\r\n                stroke='#272727'\r\n                strokeWidth='2'\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n              />\r\n              <path\r\n                d='M19 14H14V19H19V14Z'\r\n                stroke='#272727'\r\n                strokeWidth='2'\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n              />\r\n              <path\r\n                d='M10 14H5V19H10V14Z'\r\n                stroke='#272727'\r\n                strokeWidth='2'\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n              />\r\n            </svg>\r\n            <svg\r\n              onClick={(e) => handleVideoViewClick(e.target)}\r\n              className={videoView === 'list' ? '--active' : ''}\r\n              keyvalue='list'\r\n              width='24'\r\n              height='24'\r\n              viewBox='0 0 24 24'\r\n              fill='none'\r\n            >\r\n              <g>\r\n                <path\r\n                  d='M8 6H21'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n                <path\r\n                  d='M8 12H21'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n                <path\r\n                  d='M8 18H21'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n                <path\r\n                  d='M3 6H3.01'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n                <path\r\n                  d='M3 12H3.01'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n                <path\r\n                  d='M3 18H3.01'\r\n                  stroke='#272727'\r\n                  strokeWidth='2'\r\n                  strokeLinecap='round'\r\n                  strokeLinejoin='round'\r\n                />\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {videoView === 'grid' ? <VideosListGrid /> : <VideosList />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VideosContainer;\r\n","import * as types from '../../constants/types';\r\n\r\n// Get index of current User in Collection\r\nconst getUserIndex = (user_collection, login) => {\r\n    let userIndex;\r\n    user_collection.map((user, index) => {\r\n        if (user.login === login) userIndex = index;;\r\n    });\r\n    return userIndex;\r\n}\r\n\r\n// Initial Query loading from LocalStorage\r\nexport const loadQuery = (login) => (dispatch) => {\r\n    let queryArray = [];\r\n    let user_collection = JSON.parse(localStorage.getItem(\"user_collection\"));\r\n    user_collection.map(user => {\r\n        if (user.login === login) {\r\n            queryArray = user.queries;\r\n        }\r\n    });\r\n\r\n    dispatch({\r\n        type: types.query.SET,\r\n        payload: queryArray\r\n    });\r\n}\r\n\r\n// Save new Query in Store and LocalStorage\r\nexport const saveQuery = ({\r\n    id,\r\n    query,\r\n    title,\r\n    sort,\r\n    maxNumb\r\n}) => (dispatch, getState) => {\r\n    const {\r\n        login\r\n    } = getState().user;\r\n\r\n    let user_collection = JSON.parse(localStorage.getItem('user_collection'));\r\n    let userIndex = getUserIndex(user_collection, login)\r\n\r\n    const newQuery = {\r\n        id,\r\n        query,\r\n        title,\r\n        sort,\r\n        maxNumb,\r\n    };\r\n\r\n    user_collection[userIndex].queries.push(newQuery);\r\n    localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n\r\n    dispatch({\r\n        type: types.query.ADD,\r\n        payload: newQuery,\r\n    });\r\n};\r\n\r\n// Edit & save Query in Store and LocalStorage\r\nexport const changeQuery = ({\r\n    id,\r\n    query,\r\n    title,\r\n    sort,\r\n    maxNumb\r\n}) => (dispatch, getState) => {\r\n    const {\r\n        login\r\n    } = getState().user;\r\n\r\n    let user_collection = JSON.parse(localStorage.getItem('user_collection'));\r\n    let userIndex = getUserIndex(user_collection, login)\r\n\r\n    const newQuery = {\r\n        id,\r\n        query,\r\n        title,\r\n        sort,\r\n        maxNumb,\r\n    };\r\n\r\n    user_collection[userIndex].queries.map(query => {\r\n        if (query.id === id) {\r\n            query = Object.assign(query, newQuery);\r\n        }\r\n    })\r\n    localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n\r\n    console.log('newQuery', newQuery);\r\n    dispatch({\r\n        type: types.query.EDIT,\r\n        payload: newQuery,\r\n    });\r\n};\r\n\r\n// Delete Query from Store and LocalStorage\r\nexport const deleteQuery = (id) => (dispatch, getState) => {\r\n    const {\r\n        login\r\n    } = getState().user;\r\n\r\n    let user_collection = JSON.parse(localStorage.getItem('user_collection'));\r\n    let userIndex = getUserIndex(user_collection, login)\r\n\r\n    let queryIndex;\r\n    user_collection[userIndex].queries.map((query, index) => {\r\n        if (query.id === id) {\r\n            queryIndex = index;\r\n        }\r\n    });\r\n\r\n    if (queryIndex > -1) {\r\n        user_collection[userIndex].queries.splice(queryIndex, 1);\r\n    }\r\n    localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n\r\n    dispatch({\r\n        type: types.query.DELETE,\r\n        payload: id,\r\n    });\r\n}","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Form, Input, Select, Slider, InputNumber, Space, Modal } from 'antd';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveQuery, changeQuery } from '../../redux/actions/lS-manageQueries';\r\n\r\nimport './modal.scss';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction ModalQuery({ visible, mode, toggleModal, togglePopconfirm, selectedQuery }) {\r\n  const dispatch = useDispatch();\r\n  const { query } = useSelector((state) => state.video);\r\n\r\n  // Set Form instance\r\n  const [form] = Form.useForm();\r\n\r\n  // Load selectedQuery data every time, prevent drop to these values afer dispatch\r\n  const [allowChange, setAllowChange] = useState(true);\r\n  if (allowChange) {\r\n    form.setFieldsValue({\r\n      query: `${mode === 'edit' ? selectedQuery.query.query : query}`,\r\n      title: `${mode === 'edit' ? selectedQuery.query.title : ''}`,\r\n      sort: `${mode === 'edit' ? selectedQuery.query.sort : 'relevance'}`,\r\n      maxNumb: `${mode === 'edit' ? selectedQuery.query.maxNumb : 25}`,\r\n      maxNumbInput: `${mode === 'edit' ? selectedQuery.query.maxNumb : 25}`,\r\n    });\r\n  }\r\n\r\n  const setSlider = (value) => {\r\n    form.setFieldsValue({\r\n      maxNumb: value,\r\n      maxNumbInput: value,\r\n    });\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    if (mode === 'edit') {\r\n      values.id = selectedQuery.query.id;\r\n      dispatch(changeQuery(values));\r\n    } else {\r\n      values.id = uuidv4();\r\n      dispatch(saveQuery(values));\r\n      togglePopconfirm();\r\n    }\r\n    toggleModal();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={mode === 'edit' ? 'Сохранить запрос' : 'Изменить запрос'}\r\n      visible={visible}\r\n      onOk={() => {\r\n        setAllowChange(false);\r\n        form.submit();\r\n      }}\r\n      okText='Сохранить'\r\n      onCancel={toggleModal}\r\n      cancelText='Отмена'\r\n    >\r\n      <Form\r\n        className='page-search__form-container'\r\n        form={form}\r\n        layout='vertical'\r\n        name='basic'\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Space className='page-auth__form__space' size={15} direction='vertical' align='center'>\r\n          <Form.Item label='Запрос' name='query'>\r\n            <Input disabled={mode === 'edit' ? false : true} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label='Название' name='title' rules={[{ required: true }]}>\r\n            <Input placeholder='Укажите название' />\r\n          </Form.Item>\r\n\r\n          <Form.Item label='Сортировать по' name='sort'>\r\n            <Select placeholder='Без сортировки' allowClear>\r\n              <Option value='date'>Дате</Option>\r\n              <Option value='rating'>Рейтингу </Option>\r\n              <Option value='title'>Алфавитному порядку</Option>\r\n              <Option value='videoCount'>Количеству видео на канале</Option>\r\n              <Option value='viewCount'>Количеству просмотров видео</Option>\r\n              <Option value='relevance'>Без сортировки</Option>\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <div>Максимальное количество видео</div>\r\n            <div className='page-search__form__slider-container'>\r\n              <Form.Item name='maxNumb'>\r\n                <Slider\r\n                  className='page-search__form__slider'\r\n                  min={1}\r\n                  max={50}\r\n                  onChange={(value) => setSlider(value)}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item name='maxNumbInput'>\r\n                <InputNumber min={1} max={50} onChange={(value) => setSlider(value)} />\r\n              </Form.Item>\r\n            </div>\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalQuery;\r\n","import * as types from '../../constants/types';\r\n\r\nimport axios from 'axios';\r\n\r\n// Key for YouTube API\r\nconst KEY = 'AIzaSyBtgtR9X-Mx1vVRMQIP5XQXzZLKCyMASiM';\r\n\r\n// Find videos from SearchPage-Input, default query\r\nexport const searchVideos = (q) => (dispatch) => {\r\n    axios.get('https://www.googleapis.com/youtube/v3/search', {\r\n            params: {\r\n                part: 'snippet',\r\n                maxResults: 20,\r\n                q: q,\r\n                \"relevanceLanguage\": \"ru\",\r\n                key: KEY\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: types.video.SEARCH,\r\n                payload: {\r\n                    videos: res.data.items,\r\n                    query: q,\r\n                    totalResults: res.data.pageInfo.totalResults\r\n                }\r\n            });\r\n            dispatch({\r\n                type: types.video.SET_EMPTINESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\n// Find videos with custom parametres\r\nexport const callSavedQuery = ({\r\n    query,\r\n    maxNumb,\r\n    sort\r\n}) => (dispatch) => {\r\n    axios.get('https://www.googleapis.com/youtube/v3/search', {\r\n            params: {\r\n                part: 'snippet',\r\n                maxResults: maxNumb,\r\n                q: query,\r\n                order: sort,\r\n                \"relevanceLanguage\": \"ru\",\r\n                key: KEY\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: types.video.SEARCH,\r\n                payload: {\r\n                    videos: res.data.items,\r\n                    query,\r\n                    totalResults: res.data.pageInfo.totalResults\r\n                }\r\n            });\r\n            dispatch({\r\n                type: types.video.SET_EMPTINESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n}","import React, { useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Row, Col, Input, Popconfirm } from 'antd';\r\nimport { HeartOutlined } from '@ant-design/icons';\r\n\r\nimport VideosContainer from '../videos';\r\nimport Modal from '../modal';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { searchVideos } from '../../redux/actions/youtubeAction';\r\n\r\nimport './app.scss';\r\n\r\nconst { Search } = Input;\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { isEmpty } = useSelector((state) => state.video);\r\n\r\n  // Change page styles when showing videos\r\n  let pageSearchContainerType = isEmpty ? 'shrinked' : '--shrinked';\r\n\r\n  // Set visiblity for ModalWindow\r\n  const [visible, setVisibility] = useState(false);\r\n  const toggleModal = useCallback(() => {\r\n    setVisibility(!visible);\r\n  }, [visible]);\r\n\r\n  // Set visiblity for Popconfirm\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const togglePopconfirm = () => {\r\n    setPopConfirm(!popConfirm);\r\n  };\r\n\r\n  const iconHeart = (\r\n    <Popconfirm\r\n      title='Поиск сохранен в разделе \"Избранное\"'\r\n      placement='bottom'\r\n      okText='Перейти в раздел \"Избранное\"'\r\n      cancelText='Отмена'\r\n      onConfirm={() => history.push('/favorites')}\r\n      onCancel={togglePopconfirm}\r\n      visible={popConfirm}\r\n    >\r\n      <HeartOutlined\r\n        className={`page-search__pannel__btn-modal ${isEmpty ? '' : '--active'}`}\r\n        onClick={isEmpty ? null : setVisibility}\r\n      />\r\n    </Popconfirm>\r\n  );\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={4} />\r\n      <Col span={16}>\r\n        <div className={`page-search__container ${pageSearchContainerType}`}>\r\n          <h1>Поиск видео</h1>\r\n          <Search\r\n            placeholder='Что хотите посмотреть?'\r\n            enterButton='Найти'\r\n            size='large'\r\n            suffix={iconHeart}\r\n            defaultValue={''}\r\n            onSearch={(value) => (value === '' ? null : dispatch(searchVideos(value)))}\r\n          />\r\n          <VideosContainer />\r\n          <Modal visible={visible} toggleModal={toggleModal} togglePopconfirm={togglePopconfirm} />\r\n        </div>\r\n      </Col>\r\n      <Col span={4} />\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Row, Col, List, Typography, Button } from 'antd';\r\n\r\nimport Modal from '../modal';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { callSavedQuery } from '../../redux/actions/youtubeAction';\r\nimport { deleteQuery } from '../../redux/actions/lS-manageQueries';\r\n\r\nimport './favorites.scss';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nfunction Favorites() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { queries } = useSelector((state) => state.query);\r\n\r\n  // Set visiblity for ModalWindow\r\n  const [visible, setVisibility] = useState(false);\r\n\r\n  const [query, setQuery] = useState({\r\n    query: { id: '', title: '', query: '', sort: '', maxNumb: null },\r\n  });\r\n\r\n  const toggleModal = useCallback(() => {\r\n    setVisibility(!visible);\r\n  }, [visible]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={4} />\r\n      <Col span={16}>\r\n        <div className='page-favorites__container '>\r\n          <Title>Избранное</Title>\r\n          <List\r\n            className='page-favorites__list'\r\n            bordered\r\n            dataSource={queries}\r\n            renderItem={(item) => (\r\n              <List.Item key={item.id}>\r\n                <Text strong>{item.title}</Text>\r\n                <div className='page-favorites__list__btns-container'>\r\n                  <Button\r\n                    type='dashed'\r\n                    onClick={() => {\r\n                      dispatch(callSavedQuery(item));\r\n                      history.push('/');\r\n                    }}\r\n                  >\r\n                    Выполнить\r\n                  </Button>\r\n                  <div className='page-favorites__list__btns-container__btn-grp'>\r\n                    <Button\r\n                      type='primary'\r\n                      onClick={() => {\r\n                        setQuery({\r\n                          ...query,\r\n                          query: {\r\n                            id: item.id,\r\n                            title: item.title,\r\n                            query: item.query,\r\n                            sort: item.sort,\r\n                            maxNumb: item.maxNumb,\r\n                          },\r\n                        });\r\n                        setVisibility(true);\r\n                      }}\r\n                    >\r\n                      Изменить\r\n                    </Button>\r\n                    <Button type='primary' danger onClick={() => dispatch(deleteQuery(item.id))}>\r\n                      Удалить\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </List.Item>\r\n            )}\r\n          />\r\n          <Modal visible={visible} mode={'edit'} toggleModal={toggleModal} selectedQuery={query} />\r\n        </div>\r\n      </Col>\r\n      <Col span={4} />\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","// Generate token for User\r\nconst generateToken = () => {\r\n    return Math.random().toString(36).substr(2)\r\n}\r\n\r\n// Authenticate User in System\r\nexport const authUser = (login) => {\r\n    // Get token\r\n    const token = generateToken() + generateToken();\r\n\r\n    // Get userCollection from LocalStorage\r\n    let user_collection = JSON.parse(localStorage.getItem(\"user_collection\"));\r\n    const user = {\r\n        login: login,\r\n        token: token,\r\n        queries: []\r\n    }\r\n\r\n    if (user_collection === null) {\r\n        // If userCollection is null - create new with User & token\r\n        user_collection = [];\r\n        user_collection.push(user);\r\n        localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n    } else {\r\n        let userExists = false;\r\n        // Find User and add token\r\n        user_collection.map((user) => {\r\n            if (user.login === login) {\r\n                user.token = token;\r\n                userExists = true;\r\n            }\r\n        });\r\n        // If new User - add to Collection\r\n        if (!userExists) user_collection.push(user);\r\n        localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n    }\r\n}\r\n\r\n// Check User token - for auto authentication\r\nexport const checkToken = () => {\r\n    let user_collection = JSON.parse(localStorage.getItem(\"user_collection\"));\r\n    let authorizedUser = {\r\n        login: ''\r\n    };\r\n\r\n    // If userCollection is null - just return empty string\r\n    if (user_collection === null) {\r\n        return authorizedUser;\r\n    }\r\n\r\n    // If User has token - return login\r\n    user_collection.map(user => {\r\n        if (user.token !== '') {\r\n            authorizedUser.login = user.login;\r\n        }\r\n    });\r\n    return authorizedUser;\r\n}","import * as types from '../../constants/types';\r\nimport database from '../../constants/db';\r\n\r\nimport {\r\n  authUser,\r\n  checkToken\r\n} from './lS-authUser';\r\n\r\nimport {\r\n  loadQuery\r\n} from './lS-manageQueries';\r\n\r\nconst db = database;\r\n\r\n// Login from authenticationForm\r\nexport const login = ({\r\n  login,\r\n  password\r\n}) => (dispatch) => {\r\n\r\n  // Check user's registration in DB\r\n  let checkUser = false;\r\n  db.map((user) => {\r\n    if (user.login === login) {\r\n      if (user.password === password) {\r\n        return checkUser = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (checkUser) {\r\n    dispatch({\r\n      type: types.auth.LOGIN_SUCCESS,\r\n      payload: {\r\n        login: login\r\n      }\r\n    });\r\n    authUser(login);\r\n    dispatch(loadQuery(login));\r\n  } else {\r\n    dispatch({\r\n      type: types.auth.LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Check if User has token - for auto-login\r\nexport const loadUser = () => dispatch => {\r\n  const {\r\n    login\r\n  } = checkToken();\r\n  console.log('LOGIN', login);\r\n\r\n  if (login !== '') {\r\n    dispatch(loadQuery(login));\r\n    dispatch({\r\n      type: types.auth.LOGIN_SUCCESS,\r\n      payload: {\r\n        login: login\r\n      }\r\n    });\r\n  } else return null;\r\n}\r\n\r\n// Logout from App\r\nexport const logout = () => (dispatch, getState) => {\r\n  const {\r\n    login\r\n  } = getState().user;\r\n\r\n  // Remove token\r\n  let user_collection = JSON.parse(localStorage.getItem('user_collection'));\r\n  user_collection.map((user) => {\r\n    if (user.login === login) {\r\n      user.token = '';\r\n    }\r\n  });\r\n  localStorage.setItem('user_collection', JSON.stringify(user_collection));\r\n\r\n  dispatch({\r\n    type: types.auth.LOGOUT_SUCCESS\r\n  });\r\n  dispatch({\r\n    type: types.video.RESET\r\n  });\r\n}","export default [{\r\n        login: 'admin',\r\n        password: '123'\r\n    },\r\n    {\r\n        login: 'nick',\r\n        password: '123'\r\n    }\r\n]","import React from 'react';\r\n\r\nimport { Form, Input, Button, Space, message } from 'antd';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/actions/authAction';\r\n\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    span: 8,\r\n    offset: 8,\r\n  },\r\n};\r\n\r\nconst AuthenticationFrom = () => {\r\n  const dispatch = useDispatch();\r\n  const { loginFailed } = useSelector((state) => state.user);\r\n\r\n  // Show error Message, if login data is incorrect\r\n  React.useEffect(() => {\r\n    if (loginFailed) {\r\n      message.error({\r\n        content: 'Ошибка ввода логина/пароля! Проверьте данные ещё раз.',\r\n        className: 'page-auth__error',\r\n      });\r\n    }\r\n  });\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    dispatch(login(values));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      className='page-auth__form'\r\n      layout='vertical'\r\n      name='basic'\r\n      hideRequiredMark='false'\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n      <Space className='page-auth__form__space' size={15} direction='vertical' align='center'>\r\n        <Form.Item\r\n          label='Логин'\r\n          name='login'\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, введите ваш логин',\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label='Пароль'\r\n          name='password'\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Пожалуйста, введите ваш пароль',\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type='primary' size='large' htmlType='submit'>\r\n            Войти\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AuthenticationFrom;\r\n","import React from 'react';\r\n\r\nimport AuthenticationFrom from './authentication-form';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadUser } from '../../redux/actions/authAction';\r\n\r\nimport logo from '../../static/svg/sibdev-logo.svg';\r\nimport './authentication.scss';\r\n\r\nconst Authentication = () => {\r\n  const dispath = useDispatch();\r\n  const { isAuthenticated } = useSelector((state) => state.user);\r\n\r\n  // Check, if User has token\r\n  React.useEffect(() => {\r\n    dispath(loadUser());\r\n  });\r\n\r\n  return (\r\n    <div className={'page-auth__wrapper'}>\r\n      <div className={`page-auth__form-container`}>\r\n        <img className='page-auth__form__logo' src={logo} alt='logo' />\r\n        <h3 className='page-auth__form__title'>Вход</h3>\r\n        <AuthenticationFrom />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n","import React from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n\r\nimport { Row, Col, Menu } from 'antd';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logout } from '../../redux/actions/authAction';\r\n\r\nimport './navbar.scss';\r\n\r\nfunction Navbar() {\r\n  // Use location to change active Menu.Item\r\n  const location = useLocation();\r\n  const { pathname } = location;\r\n\r\n  const dispatch = useDispatch();\r\n  const { isAuthenticated } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <>\r\n      {isAuthenticated ? (\r\n        <Menu mode='horizontal'>\r\n          <Row>\r\n            <Col span={4} />\r\n            <Col span={6}>\r\n              <Menu selectedKeys={[pathname]} mode='horizontal'>\r\n                <Menu.Item key='/'>\r\n                  <Link to='/'>Поиск</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='/favorites'>\r\n                  <Link to='/favorites'>Избранное</Link>\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Col>\r\n            <Col span={9} />\r\n            <Col span={1}>\r\n              <Menu selectedKeys={[pathname]} mode='horizontal'>\r\n                <Menu.Item key='exit' onClick={() => dispatch(logout())}>\r\n                  Выход\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Col>\r\n            <Col span={4} />\r\n          </Row>\r\n        </Menu>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nimport { Switch } from 'react-router-dom';\r\nimport RouteBuilder from './route-builder';\r\nimport PrivateRouteBuilder from './route-builder-private';\r\n\r\nimport App from '../components/page-app';\r\nimport Favorites from '../components/page-favorites';\r\nimport Authentication from '../components/authentication';\r\nimport Navbar from '../components/navbar';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    component: Authentication,\r\n  },\r\n];\r\n\r\nconst privateRoutes = [\r\n  {\r\n    path: '/favorites',\r\n    component: Favorites,\r\n  },\r\n  {\r\n    path: '/',\r\n    component: App,\r\n  },\r\n];\r\n\r\nexport default function RouteFabric() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Switch>\r\n        {routes.map(({ path, component }) => (\r\n          <RouteBuilder key={path} path={path} component={component} />\r\n        ))}\r\n        {privateRoutes.map(({ path, component }) => (\r\n          <PrivateRouteBuilder key={path} path={path} component={component} />\r\n        ))}\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport RouteFabric from './route-fabric';\r\n\r\n// import Navbar from '../components/navbar';\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <RouteFabric />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import * as types from '../../constants/types';\r\n\r\nconst initialState = {\r\n  login: '',\r\n  isAuthenticated: false,\r\n  loginFailed: false\r\n};\r\n\r\nexport default (state = initialState, {\r\n  type,\r\n  payload\r\n}) => {\r\n  switch (type) {\r\n    case types.auth.LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        login: payload.login,\r\n          isAuthenticated: true\r\n      };\r\n\r\n    case types.auth.LOGOUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        login: '',\r\n          isAuthenticated: false,\r\n          loginFailed: false\r\n      }\r\n\r\n      case types.auth.LOGIN_FAIL:\r\n        return {\r\n          ...state,\r\n          loginFailed: true\r\n        }\r\n\r\n        default:\r\n          return state;\r\n  }\r\n};","import * as types from '../../constants/types';\r\n\r\nconst initialState = {\r\n    videos: [],\r\n    query: '',\r\n    totalResults: 0,\r\n    videoView: 'grid',\r\n    isEmpty: true\r\n}\r\n\r\nexport default (state = initialState, {\r\n    type,\r\n    payload\r\n}) => {\r\n    switch (type) {\r\n\r\n        case types.video.SEARCH:\r\n            return {\r\n                ...state,\r\n                videos: payload.videos,\r\n                    query: payload.query,\r\n                    totalResults: payload.totalResults\r\n            }\r\n\r\n            case types.video.CHANGE_VIEW:\r\n                return {\r\n                    ...state,\r\n                    videoView: payload\r\n                }\r\n\r\n                case types.video.SET_EMPTINESS:\r\n                    return {\r\n                        ...state,\r\n                        isEmpty: false\r\n                    }\r\n\r\n                    case types.video.RESET:\r\n                        return {\r\n                            ...state,\r\n                            videos: [],\r\n                                query: '',\r\n                                totalResults: 0,\r\n                                videoView: 'list',\r\n                                isEmpty: true\r\n                        }\r\n\r\n\r\n                        default:\r\n                            return state\r\n    }\r\n}","import * as types from '../../constants/types';\r\nimport {\r\n    queries\r\n} from '@testing-library/react';\r\n\r\nconst initialState = {\r\n    queries: []\r\n}\r\n\r\nexport default (state = initialState, {\r\n    type,\r\n    payload\r\n}) => {\r\n    switch (type) {\r\n\r\n        case types.query.SET: {\r\n            return {\r\n                ...state,\r\n                queries: payload\r\n            }\r\n        }\r\n\r\n        case types.query.ADD:\r\n            return {\r\n                ...state,\r\n                queries: [...state.queries, payload]\r\n            }\r\n\r\n            case types.query.EDIT:\r\n                return {\r\n                    ...state,\r\n                    queries: state.queries.map(query => query.id === payload.id ? {\r\n                        ...query,\r\n                        title: payload.title,\r\n                        query: payload.query,\r\n                        sort: payload.sort,\r\n                        maxNumb: payload.maxNumb\r\n                    } : query)\r\n                }\r\n\r\n                case types.query.DELETE:\r\n                    return {\r\n                        ...state,\r\n                        queries: state.queries.filter(query => query.id !== payload)\r\n\r\n                    }\r\n\r\n\r\n                    default:\r\n                        return state\r\n    }\r\n}","import {\r\n  combineReducers\r\n} from \"redux\";\r\n\r\nimport userReducer from \"./userReducer\";\r\nimport videoReducer from \"./videoReducer\";\r\nimport queryReducer from \"./queryReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  video: videoReducer,\r\n  query: queryReducer\r\n});\r\n\r\nexport default rootReducer;","import {\r\n  createStore,\r\n  compose,\r\n  applyMiddleware\r\n} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers/root\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppRouter from './routing/route';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store/configStore';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './index.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AppRouter />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}